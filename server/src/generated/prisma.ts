import { Prisma as BasePrisma, BasePrismaOptions } from 'prisma-binding'
import { GraphQLResolveInfo } from 'graphql'

export const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Church implements Node {
  floors(where: FloorWhereInput, orderBy: FloorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Floor!]
  id: ID!
  name: String
}

type Floor implements Node {
  church(where: ChurchWhereInput): Church!
  id: ID!
  name: String
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room!]
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  author(where: UserWhereInput): User!
}

type Room implements Node {
  floor(where: FloorWhereInput): Floor!
  id: ID!
  name: String
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}


#
# Other Types
#

type AggregateChurch {
  count: Int!
}

type AggregateFloor {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateRoom {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type ChurchConnection {
  pageInfo: PageInfo!
  edges: [ChurchEdge]!
  aggregate: AggregateChurch!
}

input ChurchCreateInput {
  name: String
  floors: FloorCreateManyWithoutChurchInput
}

input ChurchCreateOneWithoutFloorsInput {
  create: ChurchCreateWithoutFloorsInput
  connect: ChurchWhereUniqueInput
}

input ChurchCreateWithoutFloorsInput {
  name: String
}

type ChurchEdge {
  node: Church!
  cursor: String!
}

enum ChurchOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChurchPreviousValues {
  id: ID!
  name: String
}

type ChurchSubscriptionPayload {
  mutation: MutationType!
  node: Church
  updatedFields: [String!]
  previousValues: ChurchPreviousValues
}

input ChurchSubscriptionWhereInput {
  AND: [ChurchSubscriptionWhereInput!]
  OR: [ChurchSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChurchWhereInput
}

input ChurchUpdateInput {
  name: String
  floors: FloorUpdateManyWithoutChurchInput
}

input ChurchUpdateOneWithoutFloorsInput {
  create: ChurchCreateWithoutFloorsInput
  connect: ChurchWhereUniqueInput
  disconnect: ChurchWhereUniqueInput
  delete: ChurchWhereUniqueInput
  update: ChurchUpdateWithoutFloorsInput
  upsert: ChurchUpsertWithoutFloorsInput
}

input ChurchUpdateWithoutFloorsDataInput {
  name: String
}

input ChurchUpdateWithoutFloorsInput {
  where: ChurchWhereUniqueInput!
  data: ChurchUpdateWithoutFloorsDataInput!
}

input ChurchUpsertWithoutFloorsInput {
  where: ChurchWhereUniqueInput!
  update: ChurchUpdateWithoutFloorsDataInput!
  create: ChurchCreateWithoutFloorsInput!
}

input ChurchWhereInput {
  AND: [ChurchWhereInput!]
  OR: [ChurchWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  floors_every: FloorWhereInput
  floors_some: FloorWhereInput
  floors_none: FloorWhereInput
}

input ChurchWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

type FloorConnection {
  pageInfo: PageInfo!
  edges: [FloorEdge]!
  aggregate: AggregateFloor!
}

input FloorCreateInput {
  name: String
  church: ChurchCreateOneWithoutFloorsInput!
  rooms: RoomCreateManyWithoutFloorInput
}

input FloorCreateManyWithoutChurchInput {
  create: [FloorCreateWithoutChurchInput!]
  connect: [FloorWhereUniqueInput!]
}

input FloorCreateOneWithoutRoomsInput {
  create: FloorCreateWithoutRoomsInput
  connect: FloorWhereUniqueInput
}

input FloorCreateWithoutChurchInput {
  name: String
  rooms: RoomCreateManyWithoutFloorInput
}

input FloorCreateWithoutRoomsInput {
  name: String
  church: ChurchCreateOneWithoutFloorsInput!
}

type FloorEdge {
  node: Floor!
  cursor: String!
}

enum FloorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FloorPreviousValues {
  id: ID!
  name: String
}

type FloorSubscriptionPayload {
  mutation: MutationType!
  node: Floor
  updatedFields: [String!]
  previousValues: FloorPreviousValues
}

input FloorSubscriptionWhereInput {
  AND: [FloorSubscriptionWhereInput!]
  OR: [FloorSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FloorWhereInput
}

input FloorUpdateInput {
  name: String
  church: ChurchUpdateOneWithoutFloorsInput
  rooms: RoomUpdateManyWithoutFloorInput
}

input FloorUpdateManyWithoutChurchInput {
  create: [FloorCreateWithoutChurchInput!]
  connect: [FloorWhereUniqueInput!]
  disconnect: [FloorWhereUniqueInput!]
  delete: [FloorWhereUniqueInput!]
  update: [FloorUpdateWithoutChurchInput!]
  upsert: [FloorUpsertWithoutChurchInput!]
}

input FloorUpdateOneWithoutRoomsInput {
  create: FloorCreateWithoutRoomsInput
  connect: FloorWhereUniqueInput
  disconnect: FloorWhereUniqueInput
  delete: FloorWhereUniqueInput
  update: FloorUpdateWithoutRoomsInput
  upsert: FloorUpsertWithoutRoomsInput
}

input FloorUpdateWithoutChurchDataInput {
  name: String
  rooms: RoomUpdateManyWithoutFloorInput
}

input FloorUpdateWithoutChurchInput {
  where: FloorWhereUniqueInput!
  data: FloorUpdateWithoutChurchDataInput!
}

input FloorUpdateWithoutRoomsDataInput {
  name: String
  church: ChurchUpdateOneWithoutFloorsInput
}

input FloorUpdateWithoutRoomsInput {
  where: FloorWhereUniqueInput!
  data: FloorUpdateWithoutRoomsDataInput!
}

input FloorUpsertWithoutChurchInput {
  where: FloorWhereUniqueInput!
  update: FloorUpdateWithoutChurchDataInput!
  create: FloorCreateWithoutChurchInput!
}

input FloorUpsertWithoutRoomsInput {
  where: FloorWhereUniqueInput!
  update: FloorUpdateWithoutRoomsDataInput!
  create: FloorCreateWithoutRoomsInput!
}

input FloorWhereInput {
  AND: [FloorWhereInput!]
  OR: [FloorWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  church: ChurchWhereInput
  rooms_every: RoomWhereInput
  rooms_some: RoomWhereInput
  rooms_none: RoomWhereInput
}

input FloorWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  createChurch(data: ChurchCreateInput!): Church!
  createFloor(data: FloorCreateInput!): Floor!
  createRoom(data: RoomCreateInput!): Room!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateChurch(data: ChurchUpdateInput!, where: ChurchWhereUniqueInput!): Church
  updateFloor(data: FloorUpdateInput!, where: FloorWhereUniqueInput!): Floor
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  deleteChurch(where: ChurchWhereUniqueInput!): Church
  deleteFloor(where: FloorWhereUniqueInput!): Floor
  deleteRoom(where: RoomWhereUniqueInput!): Room
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertChurch(where: ChurchWhereUniqueInput!, create: ChurchCreateInput!, update: ChurchUpdateInput!): Church!
  upsertFloor(where: FloorWhereUniqueInput!, create: FloorCreateInput!, update: FloorUpdateInput!): Floor!
  upsertRoom(where: RoomWhereUniqueInput!, create: RoomCreateInput!, update: RoomUpdateInput!): Room!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyChurches(data: ChurchUpdateInput!, where: ChurchWhereInput!): BatchPayload!
  updateManyFloors(data: FloorUpdateInput!, where: FloorWhereInput!): BatchPayload!
  updateManyRooms(data: RoomUpdateInput!, where: RoomWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyChurches(where: ChurchWhereInput!): BatchPayload!
  deleteManyFloors(where: FloorWhereInput!): BatchPayload!
  deleteManyRooms(where: RoomWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  isPublished: Boolean
  title: String!
  text: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithoutAuthorInput!]
  upsert: [PostUpsertWithoutAuthorInput!]
}

input PostUpdateWithoutAuthorDataInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostUpdateWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  churches(where: ChurchWhereInput, orderBy: ChurchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Church]!
  floors(where: FloorWhereInput, orderBy: FloorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Floor]!
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room]!
  post(where: PostWhereUniqueInput!): Post
  user(where: UserWhereUniqueInput!): User
  church(where: ChurchWhereUniqueInput!): Church
  floor(where: FloorWhereUniqueInput!): Floor
  room(where: RoomWhereUniqueInput!): Room
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  churchesConnection(where: ChurchWhereInput, orderBy: ChurchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChurchConnection!
  floorsConnection(where: FloorWhereInput, orderBy: FloorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FloorConnection!
  roomsConnection(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoomConnection!
  node(id: ID!): Node
}

type RoomConnection {
  pageInfo: PageInfo!
  edges: [RoomEdge]!
  aggregate: AggregateRoom!
}

input RoomCreateInput {
  name: String
  floor: FloorCreateOneWithoutRoomsInput!
}

input RoomCreateManyWithoutFloorInput {
  create: [RoomCreateWithoutFloorInput!]
  connect: [RoomWhereUniqueInput!]
}

input RoomCreateWithoutFloorInput {
  name: String
}

type RoomEdge {
  node: Room!
  cursor: String!
}

enum RoomOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoomPreviousValues {
  id: ID!
  name: String
}

type RoomSubscriptionPayload {
  mutation: MutationType!
  node: Room
  updatedFields: [String!]
  previousValues: RoomPreviousValues
}

input RoomSubscriptionWhereInput {
  AND: [RoomSubscriptionWhereInput!]
  OR: [RoomSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoomWhereInput
}

input RoomUpdateInput {
  name: String
  floor: FloorUpdateOneWithoutRoomsInput
}

input RoomUpdateManyWithoutFloorInput {
  create: [RoomCreateWithoutFloorInput!]
  connect: [RoomWhereUniqueInput!]
  disconnect: [RoomWhereUniqueInput!]
  delete: [RoomWhereUniqueInput!]
  update: [RoomUpdateWithoutFloorInput!]
  upsert: [RoomUpsertWithoutFloorInput!]
}

input RoomUpdateWithoutFloorDataInput {
  name: String
}

input RoomUpdateWithoutFloorInput {
  where: RoomWhereUniqueInput!
  data: RoomUpdateWithoutFloorDataInput!
}

input RoomUpsertWithoutFloorInput {
  where: RoomWhereUniqueInput!
  update: RoomUpdateWithoutFloorDataInput!
  create: RoomCreateWithoutFloorInput!
}

input RoomWhereInput {
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  floor: FloorWhereInput
}

input RoomWhereUniqueInput {
  id: ID
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  church(where: ChurchSubscriptionWhereInput): ChurchSubscriptionPayload
  floor(where: FloorSubscriptionWhereInput): FloorSubscriptionPayload
  room(where: RoomSubscriptionWhereInput): RoomSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  email: String!
  password: String!
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  password: String
  name: String
}

input UserUpdateWithoutPostsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithoutPostsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`

export type UserOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'email_ASC' |
  'email_DESC' |
  'password_ASC' |
  'password_DESC' |
  'name_ASC' |
  'name_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type PostOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'isPublished_ASC' |
  'isPublished_DESC' |
  'title_ASC' |
  'title_DESC' |
  'text_ASC' |
  'text_DESC'

export type ChurchOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type FloorOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type RoomOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type MutationType = 
  'CREATED' |
  'UPDATED' |
  'DELETED'

export interface FloorCreateInput {
  name?: String
  church: ChurchCreateOneWithoutFloorsInput
  rooms?: RoomCreateManyWithoutFloorInput
}

export interface PostWhereInput {
  AND?: PostWhereInput[] | PostWhereInput
  OR?: PostWhereInput[] | PostWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  isPublished?: Boolean
  isPublished_not?: Boolean
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  text?: String
  text_not?: String
  text_in?: String[] | String
  text_not_in?: String[] | String
  text_lt?: String
  text_lte?: String
  text_gt?: String
  text_gte?: String
  text_contains?: String
  text_not_contains?: String
  text_starts_with?: String
  text_not_starts_with?: String
  text_ends_with?: String
  text_not_ends_with?: String
  author?: UserWhereInput
}

export interface FloorUpdateWithoutChurchDataInput {
  name?: String
  rooms?: RoomUpdateManyWithoutFloorInput
}

export interface PostUpsertWithoutAuthorInput {
  where: PostWhereUniqueInput
  update: PostUpdateWithoutAuthorDataInput
  create: PostCreateWithoutAuthorInput
}

export interface FloorUpdateWithoutChurchInput {
  where: FloorWhereUniqueInput
  data: FloorUpdateWithoutChurchDataInput
}

export interface FloorCreateOneWithoutRoomsInput {
  create?: FloorCreateWithoutRoomsInput
  connect?: FloorWhereUniqueInput
}

export interface FloorUpdateManyWithoutChurchInput {
  create?: FloorCreateWithoutChurchInput[] | FloorCreateWithoutChurchInput
  connect?: FloorWhereUniqueInput[] | FloorWhereUniqueInput
  disconnect?: FloorWhereUniqueInput[] | FloorWhereUniqueInput
  delete?: FloorWhereUniqueInput[] | FloorWhereUniqueInput
  update?: FloorUpdateWithoutChurchInput[] | FloorUpdateWithoutChurchInput
  upsert?: FloorUpsertWithoutChurchInput[] | FloorUpsertWithoutChurchInput
}

export interface FloorSubscriptionWhereInput {
  AND?: FloorSubscriptionWhereInput[] | FloorSubscriptionWhereInput
  OR?: FloorSubscriptionWhereInput[] | FloorSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: FloorWhereInput
}

export interface PostCreateInput {
  isPublished?: Boolean
  title: String
  text: String
  author: UserCreateOneWithoutPostsInput
}

export interface FloorWhereInput {
  AND?: FloorWhereInput[] | FloorWhereInput
  OR?: FloorWhereInput[] | FloorWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  church?: ChurchWhereInput
  rooms_every?: RoomWhereInput
  rooms_some?: RoomWhereInput
  rooms_none?: RoomWhereInput
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput
  connect?: UserWhereUniqueInput
}

export interface UserWhereInput {
  AND?: UserWhereInput[] | UserWhereInput
  OR?: UserWhereInput[] | UserWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  email?: String
  email_not?: String
  email_in?: String[] | String
  email_not_in?: String[] | String
  email_lt?: String
  email_lte?: String
  email_gt?: String
  email_gte?: String
  email_contains?: String
  email_not_contains?: String
  email_starts_with?: String
  email_not_starts_with?: String
  email_ends_with?: String
  email_not_ends_with?: String
  password?: String
  password_not?: String
  password_in?: String[] | String
  password_not_in?: String[] | String
  password_lt?: String
  password_lte?: String
  password_gt?: String
  password_gte?: String
  password_contains?: String
  password_not_contains?: String
  password_starts_with?: String
  password_not_starts_with?: String
  password_ends_with?: String
  password_not_ends_with?: String
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  posts_every?: PostWhereInput
  posts_some?: PostWhereInput
  posts_none?: PostWhereInput
}

export interface UserCreateWithoutPostsInput {
  email: String
  password: String
  name: String
}

export interface UserSubscriptionWhereInput {
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: UserWhereInput
}

export interface UserCreateInput {
  email: String
  password: String
  name: String
  posts?: PostCreateManyWithoutAuthorInput
}

export interface FloorUpsertWithoutRoomsInput {
  where: FloorWhereUniqueInput
  update: FloorUpdateWithoutRoomsDataInput
  create: FloorCreateWithoutRoomsInput
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput
}

export interface PostWhereUniqueInput {
  id?: ID_Input
}

export interface PostCreateWithoutAuthorInput {
  isPublished?: Boolean
  title: String
  text: String
}

export interface ChurchWhereUniqueInput {
  id?: ID_Input
  name?: String
}

export interface ChurchCreateInput {
  name?: String
  floors?: FloorCreateManyWithoutChurchInput
}

export interface RoomWhereUniqueInput {
  id?: ID_Input
}

export interface FloorCreateManyWithoutChurchInput {
  create?: FloorCreateWithoutChurchInput[] | FloorCreateWithoutChurchInput
  connect?: FloorWhereUniqueInput[] | FloorWhereUniqueInput
}

export interface FloorUpdateOneWithoutRoomsInput {
  create?: FloorCreateWithoutRoomsInput
  connect?: FloorWhereUniqueInput
  disconnect?: FloorWhereUniqueInput
  delete?: FloorWhereUniqueInput
  update?: FloorUpdateWithoutRoomsInput
  upsert?: FloorUpsertWithoutRoomsInput
}

export interface FloorCreateWithoutChurchInput {
  name?: String
  rooms?: RoomCreateManyWithoutFloorInput
}

export interface ChurchUpsertWithoutFloorsInput {
  where: ChurchWhereUniqueInput
  update: ChurchUpdateWithoutFloorsDataInput
  create: ChurchCreateWithoutFloorsInput
}

export interface RoomCreateManyWithoutFloorInput {
  create?: RoomCreateWithoutFloorInput[] | RoomCreateWithoutFloorInput
  connect?: RoomWhereUniqueInput[] | RoomWhereUniqueInput
}

export interface ChurchUpdateWithoutFloorsInput {
  where: ChurchWhereUniqueInput
  data: ChurchUpdateWithoutFloorsDataInput
}

export interface RoomCreateWithoutFloorInput {
  name?: String
}

export interface FloorUpdateInput {
  name?: String
  church?: ChurchUpdateOneWithoutFloorsInput
  rooms?: RoomUpdateManyWithoutFloorInput
}

export interface ChurchUpdateInput {
  name?: String
  floors?: FloorUpdateManyWithoutChurchInput
}

export interface RoomUpsertWithoutFloorInput {
  where: RoomWhereUniqueInput
  update: RoomUpdateWithoutFloorDataInput
  create: RoomCreateWithoutFloorInput
}

export interface ChurchCreateOneWithoutFloorsInput {
  create?: ChurchCreateWithoutFloorsInput
  connect?: ChurchWhereUniqueInput
}

export interface RoomUpdateWithoutFloorInput {
  where: RoomWhereUniqueInput
  data: RoomUpdateWithoutFloorDataInput
}

export interface ChurchCreateWithoutFloorsInput {
  name?: String
}

export interface RoomSubscriptionWhereInput {
  AND?: RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput
  OR?: RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: RoomWhereInput
}

export interface RoomCreateInput {
  name?: String
  floor: FloorCreateOneWithoutRoomsInput
}

export interface RoomWhereInput {
  AND?: RoomWhereInput[] | RoomWhereInput
  OR?: RoomWhereInput[] | RoomWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  floor?: FloorWhereInput
}

export interface PostSubscriptionWhereInput {
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PostWhereInput
}

export interface UserWhereUniqueInput {
  id?: ID_Input
  email?: String
}

export interface FloorCreateWithoutRoomsInput {
  name?: String
  church: ChurchCreateOneWithoutFloorsInput
}

export interface FloorUpdateWithoutRoomsInput {
  where: FloorWhereUniqueInput
  data: FloorUpdateWithoutRoomsDataInput
}

export interface PostUpdateInput {
  isPublished?: Boolean
  title?: String
  text?: String
  author?: UserUpdateOneWithoutPostsInput
}

export interface ChurchUpdateWithoutFloorsDataInput {
  name?: String
}

export interface UserUpdateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutPostsInput
  upsert?: UserUpsertWithoutPostsInput
}

export interface FloorUpsertWithoutChurchInput {
  where: FloorWhereUniqueInput
  update: FloorUpdateWithoutChurchDataInput
  create: FloorCreateWithoutChurchInput
}

export interface UserUpdateWithoutPostsInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutPostsDataInput
}

export interface RoomUpdateManyWithoutFloorInput {
  create?: RoomCreateWithoutFloorInput[] | RoomCreateWithoutFloorInput
  connect?: RoomWhereUniqueInput[] | RoomWhereUniqueInput
  disconnect?: RoomWhereUniqueInput[] | RoomWhereUniqueInput
  delete?: RoomWhereUniqueInput[] | RoomWhereUniqueInput
  update?: RoomUpdateWithoutFloorInput[] | RoomUpdateWithoutFloorInput
  upsert?: RoomUpsertWithoutFloorInput[] | RoomUpsertWithoutFloorInput
}

export interface UserUpdateWithoutPostsDataInput {
  email?: String
  password?: String
  name?: String
}

export interface ChurchSubscriptionWhereInput {
  AND?: ChurchSubscriptionWhereInput[] | ChurchSubscriptionWhereInput
  OR?: ChurchSubscriptionWhereInput[] | ChurchSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ChurchWhereInput
}

export interface UserUpsertWithoutPostsInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  create: UserCreateWithoutPostsInput
}

export interface FloorWhereUniqueInput {
  id?: ID_Input
}

export interface PostUpdateWithoutAuthorDataInput {
  isPublished?: Boolean
  title?: String
  text?: String
}

export interface PostUpdateWithoutAuthorInput {
  where: PostWhereUniqueInput
  data: PostUpdateWithoutAuthorDataInput
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput
  update?: PostUpdateWithoutAuthorInput[] | PostUpdateWithoutAuthorInput
  upsert?: PostUpsertWithoutAuthorInput[] | PostUpsertWithoutAuthorInput
}

export interface UserUpdateInput {
  email?: String
  password?: String
  name?: String
  posts?: PostUpdateManyWithoutAuthorInput
}

export interface RoomUpdateInput {
  name?: String
  floor?: FloorUpdateOneWithoutRoomsInput
}

export interface FloorUpdateWithoutRoomsDataInput {
  name?: String
  church?: ChurchUpdateOneWithoutFloorsInput
}

export interface ChurchWhereInput {
  AND?: ChurchWhereInput[] | ChurchWhereInput
  OR?: ChurchWhereInput[] | ChurchWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  floors_every?: FloorWhereInput
  floors_some?: FloorWhereInput
  floors_none?: FloorWhereInput
}

export interface RoomUpdateWithoutFloorDataInput {
  name?: String
}

export interface ChurchUpdateOneWithoutFloorsInput {
  create?: ChurchCreateWithoutFloorsInput
  connect?: ChurchWhereUniqueInput
  disconnect?: ChurchWhereUniqueInput
  delete?: ChurchWhereUniqueInput
  update?: ChurchUpdateWithoutFloorsInput
  upsert?: ChurchUpsertWithoutFloorsInput
}

export interface Node {
  id: ID_Output
}

export interface RoomPreviousValues {
  id: ID_Output
  name?: String
}

export interface PostConnection {
  pageInfo: PageInfo
  edges: PostEdge[]
  aggregate: AggregatePost
}

export interface FloorSubscriptionPayload {
  mutation: MutationType
  node?: Floor
  updatedFields?: String[]
  previousValues?: FloorPreviousValues
}

export interface Room extends Node {
  floor: Floor
  id: ID_Output
  name?: String
}

export interface Post extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  isPublished: Boolean
  title: String
  text: String
  author: User
}

export interface AggregateRoom {
  count: Int
}

export interface RoomConnection {
  pageInfo: PageInfo
  edges: RoomEdge[]
  aggregate: AggregateRoom
}

export interface BatchPayload {
  count: Long
}

export interface FloorEdge {
  node: Floor
  cursor: String
}

export interface RoomSubscriptionPayload {
  mutation: MutationType
  node?: Room
  updatedFields?: String[]
  previousValues?: RoomPreviousValues
}

export interface AggregateChurch {
  count: Int
}

export interface Floor extends Node {
  church: Church
  id: ID_Output
  name?: String
  rooms?: Room[]
}

export interface ChurchConnection {
  pageInfo: PageInfo
  edges: ChurchEdge[]
  aggregate: AggregateChurch
}

export interface User extends Node {
  id: ID_Output
  email: String
  password: String
  name: String
  posts?: Post[]
}

export interface UserEdge {
  node: User
  cursor: String
}

export interface PostSubscriptionPayload {
  mutation: MutationType
  node?: Post
  updatedFields?: String[]
  previousValues?: PostPreviousValues
}

export interface AggregatePost {
  count: Int
}

export interface PostPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  isPublished: Boolean
  title: String
  text: String
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface FloorPreviousValues {
  id: ID_Output
  name?: String
}

export interface AggregateFloor {
  count: Int
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node?: User
  updatedFields?: String[]
  previousValues?: UserPreviousValues
}

export interface ChurchEdge {
  node: Church
  cursor: String
}

export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
  aggregate: AggregateUser
}

export interface ChurchPreviousValues {
  id: ID_Output
  name?: String
}

export interface ChurchSubscriptionPayload {
  mutation: MutationType
  node?: Church
  updatedFields?: String[]
  previousValues?: ChurchPreviousValues
}

export interface Church extends Node {
  floors?: Floor[]
  id: ID_Output
  name?: String
}

export interface UserPreviousValues {
  id: ID_Output
  email: String
  password: String
  name: String
}

export interface PostEdge {
  node: Post
  cursor: String
}

export interface AggregateUser {
  count: Int
}

export interface FloorConnection {
  pageInfo: PageInfo
  edges: FloorEdge[]
  aggregate: AggregateFloor
}

export interface RoomEdge {
  node: Room
  cursor: String
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

export type Long = string

export type DateTime = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

export interface Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

export type Query = {
  posts: (args: { where?: PostWhereInput, orderBy?: PostOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Post[]>
  users: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<User[]>
  churches: (args: { where?: ChurchWhereInput, orderBy?: ChurchOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Church[]>
  floors: (args: { where?: FloorWhereInput, orderBy?: FloorOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Floor[]>
  rooms: (args: { where?: RoomWhereInput, orderBy?: RoomOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Room[]>
  post: (args: { where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  user: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  church: (args: { where: ChurchWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Church | null>
  floor: (args: { where: FloorWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Floor | null>
  room: (args: { where: RoomWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Room | null>
  postsConnection: (args: { where?: PostWhereInput, orderBy?: PostOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PostConnection>
  usersConnection: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<UserConnection>
  churchesConnection: (args: { where?: ChurchWhereInput, orderBy?: ChurchOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ChurchConnection>
  floorsConnection: (args: { where?: FloorWhereInput, orderBy?: FloorOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<FloorConnection>
  roomsConnection: (args: { where?: RoomWhereInput, orderBy?: RoomOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<RoomConnection>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string) => Promise<Node | null>
}

export type Mutation = {
  createPost: (args: { data: PostCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Post>
  createUser: (args: { data: UserCreateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  createChurch: (args: { data: ChurchCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Church>
  createFloor: (args: { data: FloorCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Floor>
  createRoom: (args: { data: RoomCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Room>
  updatePost: (args: { data: PostUpdateInput, where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  updateUser: (args: { data: UserUpdateInput, where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  updateChurch: (args: { data: ChurchUpdateInput, where: ChurchWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Church | null>
  updateFloor: (args: { data: FloorUpdateInput, where: FloorWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Floor | null>
  updateRoom: (args: { data: RoomUpdateInput, where: RoomWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Room | null>
  deletePost: (args: { where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  deleteUser: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  deleteChurch: (args: { where: ChurchWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Church | null>
  deleteFloor: (args: { where: FloorWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Floor | null>
  deleteRoom: (args: { where: RoomWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Room | null>
  upsertPost: (args: { where: PostWhereUniqueInput, create: PostCreateInput, update: PostUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Post>
  upsertUser: (args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  upsertChurch: (args: { where: ChurchWhereUniqueInput, create: ChurchCreateInput, update: ChurchUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Church>
  upsertFloor: (args: { where: FloorWhereUniqueInput, create: FloorCreateInput, update: FloorUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Floor>
  upsertRoom: (args: { where: RoomWhereUniqueInput, create: RoomCreateInput, update: RoomUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Room>
  updateManyPosts: (args: { data: PostUpdateInput, where: PostWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyUsers: (args: { data: UserUpdateInput, where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyChurches: (args: { data: ChurchUpdateInput, where: ChurchWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyFloors: (args: { data: FloorUpdateInput, where: FloorWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyRooms: (args: { data: RoomUpdateInput, where: RoomWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPosts: (args: { where: PostWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyUsers: (args: { where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyChurches: (args: { where: ChurchWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyFloors: (args: { where: FloorWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyRooms: (args: { where: RoomWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
}

export type Subscription = {
  post: (args: { where?: PostSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PostSubscriptionPayload>>
  user: (args: { where?: UserSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<UserSubscriptionPayload>>
  church: (args: { where?: ChurchSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ChurchSubscriptionPayload>>
  floor: (args: { where?: FloorSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<FloorSubscriptionPayload>>
  room: (args: { where?: RoomSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<RoomSubscriptionPayload>>
}

export class Prisma extends BasePrisma {
  
  constructor({ endpoint, secret, fragmentReplacements, debug }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    Post: (where: PostWhereInput): Promise<boolean> => super.existsDelegate('query', 'posts', { where }, {}, '{ id }'),
    User: (where: UserWhereInput): Promise<boolean> => super.existsDelegate('query', 'users', { where }, {}, '{ id }'),
    Church: (where: ChurchWhereInput): Promise<boolean> => super.existsDelegate('query', 'churches', { where }, {}, '{ id }'),
    Floor: (where: FloorWhereInput): Promise<boolean> => super.existsDelegate('query', 'floors', { where }, {}, '{ id }'),
    Room: (where: RoomWhereInput): Promise<boolean> => super.existsDelegate('query', 'rooms', { where }, {}, '{ id }')
  }

  query: Query = {
    posts: (args, info): Promise<Post[]> => super.delegate('query', 'posts', args, {}, info),
    users: (args, info): Promise<User[]> => super.delegate('query', 'users', args, {}, info),
    churches: (args, info): Promise<Church[]> => super.delegate('query', 'churches', args, {}, info),
    floors: (args, info): Promise<Floor[]> => super.delegate('query', 'floors', args, {}, info),
    rooms: (args, info): Promise<Room[]> => super.delegate('query', 'rooms', args, {}, info),
    post: (args, info): Promise<Post | null> => super.delegate('query', 'post', args, {}, info),
    user: (args, info): Promise<User | null> => super.delegate('query', 'user', args, {}, info),
    church: (args, info): Promise<Church | null> => super.delegate('query', 'church', args, {}, info),
    floor: (args, info): Promise<Floor | null> => super.delegate('query', 'floor', args, {}, info),
    room: (args, info): Promise<Room | null> => super.delegate('query', 'room', args, {}, info),
    postsConnection: (args, info): Promise<PostConnection> => super.delegate('query', 'postsConnection', args, {}, info),
    usersConnection: (args, info): Promise<UserConnection> => super.delegate('query', 'usersConnection', args, {}, info),
    churchesConnection: (args, info): Promise<ChurchConnection> => super.delegate('query', 'churchesConnection', args, {}, info),
    floorsConnection: (args, info): Promise<FloorConnection> => super.delegate('query', 'floorsConnection', args, {}, info),
    roomsConnection: (args, info): Promise<RoomConnection> => super.delegate('query', 'roomsConnection', args, {}, info),
    node: (args, info): Promise<Node | null> => super.delegate('query', 'node', args, {}, info)
  }

  mutation: Mutation = {
    createPost: (args, info): Promise<Post> => super.delegate('mutation', 'createPost', args, {}, info),
    createUser: (args, info): Promise<User> => super.delegate('mutation', 'createUser', args, {}, info),
    createChurch: (args, info): Promise<Church> => super.delegate('mutation', 'createChurch', args, {}, info),
    createFloor: (args, info): Promise<Floor> => super.delegate('mutation', 'createFloor', args, {}, info),
    createRoom: (args, info): Promise<Room> => super.delegate('mutation', 'createRoom', args, {}, info),
    updatePost: (args, info): Promise<Post | null> => super.delegate('mutation', 'updatePost', args, {}, info),
    updateUser: (args, info): Promise<User | null> => super.delegate('mutation', 'updateUser', args, {}, info),
    updateChurch: (args, info): Promise<Church | null> => super.delegate('mutation', 'updateChurch', args, {}, info),
    updateFloor: (args, info): Promise<Floor | null> => super.delegate('mutation', 'updateFloor', args, {}, info),
    updateRoom: (args, info): Promise<Room | null> => super.delegate('mutation', 'updateRoom', args, {}, info),
    deletePost: (args, info): Promise<Post | null> => super.delegate('mutation', 'deletePost', args, {}, info),
    deleteUser: (args, info): Promise<User | null> => super.delegate('mutation', 'deleteUser', args, {}, info),
    deleteChurch: (args, info): Promise<Church | null> => super.delegate('mutation', 'deleteChurch', args, {}, info),
    deleteFloor: (args, info): Promise<Floor | null> => super.delegate('mutation', 'deleteFloor', args, {}, info),
    deleteRoom: (args, info): Promise<Room | null> => super.delegate('mutation', 'deleteRoom', args, {}, info),
    upsertPost: (args, info): Promise<Post> => super.delegate('mutation', 'upsertPost', args, {}, info),
    upsertUser: (args, info): Promise<User> => super.delegate('mutation', 'upsertUser', args, {}, info),
    upsertChurch: (args, info): Promise<Church> => super.delegate('mutation', 'upsertChurch', args, {}, info),
    upsertFloor: (args, info): Promise<Floor> => super.delegate('mutation', 'upsertFloor', args, {}, info),
    upsertRoom: (args, info): Promise<Room> => super.delegate('mutation', 'upsertRoom', args, {}, info),
    updateManyPosts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPosts', args, {}, info),
    updateManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyUsers', args, {}, info),
    updateManyChurches: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyChurches', args, {}, info),
    updateManyFloors: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyFloors', args, {}, info),
    updateManyRooms: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyRooms', args, {}, info),
    deleteManyPosts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPosts', args, {}, info),
    deleteManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyUsers', args, {}, info),
    deleteManyChurches: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyChurches', args, {}, info),
    deleteManyFloors: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyFloors', args, {}, info),
    deleteManyRooms: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyRooms', args, {}, info)
  }

  subscription: Subscription = {
    post: (args, infoOrQuery): Promise<AsyncIterator<PostSubscriptionPayload>> => super.delegateSubscription('post', args, {}, infoOrQuery),
    user: (args, infoOrQuery): Promise<AsyncIterator<UserSubscriptionPayload>> => super.delegateSubscription('user', args, {}, infoOrQuery),
    church: (args, infoOrQuery): Promise<AsyncIterator<ChurchSubscriptionPayload>> => super.delegateSubscription('church', args, {}, infoOrQuery),
    floor: (args, infoOrQuery): Promise<AsyncIterator<FloorSubscriptionPayload>> => super.delegateSubscription('floor', args, {}, infoOrQuery),
    room: (args, infoOrQuery): Promise<AsyncIterator<RoomSubscriptionPayload>> => super.delegateSubscription('room', args, {}, infoOrQuery)
  }
}