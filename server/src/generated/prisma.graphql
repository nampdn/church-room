# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Church implements Node {
  id: ID!
  name: String
  floors(where: FloorWhereInput, orderBy: FloorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Floor!]
}

type Floor implements Node {
  id: ID!
  name: String
  church(where: ChurchWhereInput): Church!
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room!]
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  author(where: UserWhereInput): User!
}

type RentRequest implements Node {
  id: ID!
  user(where: UserWhereInput): User!
  status: REQUEST_STATUS
}

type Room implements Node {
  id: ID!
  name: String
  floor(where: FloorWhereInput): Floor!
}

type Schedule implements Node {
  id: ID!
  booker(where: UserWhereInput): User!
  roomStatus: ROOM_STATUS
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}


#
# Other Types
#

type AggregateChurch {
  count: Int!
}

type AggregateFloor {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateRentRequest {
  count: Int!
}

type AggregateRoom {
  count: Int!
}

type AggregateSchedule {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type ChurchConnection {
  pageInfo: PageInfo!
  edges: [ChurchEdge]!
  aggregate: AggregateChurch!
}

input ChurchCreateInput {
  name: String
  floors: FloorCreateManyWithoutChurchInput
}

input ChurchCreateOneWithoutFloorsInput {
  create: ChurchCreateWithoutFloorsInput
  connect: ChurchWhereUniqueInput
}

input ChurchCreateWithoutFloorsInput {
  name: String
}

type ChurchEdge {
  node: Church!
  cursor: String!
}

enum ChurchOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChurchPreviousValues {
  id: ID!
  name: String
}

type ChurchSubscriptionPayload {
  mutation: MutationType!
  node: Church
  updatedFields: [String!]
  previousValues: ChurchPreviousValues
}

input ChurchSubscriptionWhereInput {
  AND: [ChurchSubscriptionWhereInput!]
  OR: [ChurchSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChurchWhereInput
}

input ChurchUpdateInput {
  name: String
  floors: FloorUpdateManyWithoutChurchInput
}

input ChurchUpdateOneWithoutFloorsInput {
  create: ChurchCreateWithoutFloorsInput
  connect: ChurchWhereUniqueInput
  disconnect: ChurchWhereUniqueInput
  delete: ChurchWhereUniqueInput
  update: ChurchUpdateWithoutFloorsInput
  upsert: ChurchUpsertWithoutFloorsInput
}

input ChurchUpdateWithoutFloorsDataInput {
  name: String
}

input ChurchUpdateWithoutFloorsInput {
  where: ChurchWhereUniqueInput!
  data: ChurchUpdateWithoutFloorsDataInput!
}

input ChurchUpsertWithoutFloorsInput {
  where: ChurchWhereUniqueInput!
  update: ChurchUpdateWithoutFloorsDataInput!
  create: ChurchCreateWithoutFloorsInput!
}

input ChurchWhereInput {
  AND: [ChurchWhereInput!]
  OR: [ChurchWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  floors_every: FloorWhereInput
  floors_some: FloorWhereInput
  floors_none: FloorWhereInput
}

input ChurchWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

type FloorConnection {
  pageInfo: PageInfo!
  edges: [FloorEdge]!
  aggregate: AggregateFloor!
}

input FloorCreateInput {
  name: String
  church: ChurchCreateOneWithoutFloorsInput!
  rooms: RoomCreateManyWithoutFloorInput
}

input FloorCreateManyWithoutChurchInput {
  create: [FloorCreateWithoutChurchInput!]
  connect: [FloorWhereUniqueInput!]
}

input FloorCreateOneWithoutRoomsInput {
  create: FloorCreateWithoutRoomsInput
  connect: FloorWhereUniqueInput
}

input FloorCreateWithoutChurchInput {
  name: String
  rooms: RoomCreateManyWithoutFloorInput
}

input FloorCreateWithoutRoomsInput {
  name: String
  church: ChurchCreateOneWithoutFloorsInput!
}

type FloorEdge {
  node: Floor!
  cursor: String!
}

enum FloorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FloorPreviousValues {
  id: ID!
  name: String
}

type FloorSubscriptionPayload {
  mutation: MutationType!
  node: Floor
  updatedFields: [String!]
  previousValues: FloorPreviousValues
}

input FloorSubscriptionWhereInput {
  AND: [FloorSubscriptionWhereInput!]
  OR: [FloorSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FloorWhereInput
}

input FloorUpdateInput {
  name: String
  church: ChurchUpdateOneWithoutFloorsInput
  rooms: RoomUpdateManyWithoutFloorInput
}

input FloorUpdateManyWithoutChurchInput {
  create: [FloorCreateWithoutChurchInput!]
  connect: [FloorWhereUniqueInput!]
  disconnect: [FloorWhereUniqueInput!]
  delete: [FloorWhereUniqueInput!]
  update: [FloorUpdateWithoutChurchInput!]
  upsert: [FloorUpsertWithoutChurchInput!]
}

input FloorUpdateOneWithoutRoomsInput {
  create: FloorCreateWithoutRoomsInput
  connect: FloorWhereUniqueInput
  disconnect: FloorWhereUniqueInput
  delete: FloorWhereUniqueInput
  update: FloorUpdateWithoutRoomsInput
  upsert: FloorUpsertWithoutRoomsInput
}

input FloorUpdateWithoutChurchDataInput {
  name: String
  rooms: RoomUpdateManyWithoutFloorInput
}

input FloorUpdateWithoutChurchInput {
  where: FloorWhereUniqueInput!
  data: FloorUpdateWithoutChurchDataInput!
}

input FloorUpdateWithoutRoomsDataInput {
  name: String
  church: ChurchUpdateOneWithoutFloorsInput
}

input FloorUpdateWithoutRoomsInput {
  where: FloorWhereUniqueInput!
  data: FloorUpdateWithoutRoomsDataInput!
}

input FloorUpsertWithoutChurchInput {
  where: FloorWhereUniqueInput!
  update: FloorUpdateWithoutChurchDataInput!
  create: FloorCreateWithoutChurchInput!
}

input FloorUpsertWithoutRoomsInput {
  where: FloorWhereUniqueInput!
  update: FloorUpdateWithoutRoomsDataInput!
  create: FloorCreateWithoutRoomsInput!
}

input FloorWhereInput {
  AND: [FloorWhereInput!]
  OR: [FloorWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  church: ChurchWhereInput
  rooms_every: RoomWhereInput
  rooms_some: RoomWhereInput
  rooms_none: RoomWhereInput
}

input FloorWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  createChurch(data: ChurchCreateInput!): Church!
  createFloor(data: FloorCreateInput!): Floor!
  createRoom(data: RoomCreateInput!): Room!
  createSchedule(data: ScheduleCreateInput!): Schedule!
  createRentRequest(data: RentRequestCreateInput!): RentRequest!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateChurch(data: ChurchUpdateInput!, where: ChurchWhereUniqueInput!): Church
  updateFloor(data: FloorUpdateInput!, where: FloorWhereUniqueInput!): Floor
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  updateSchedule(data: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule
  updateRentRequest(data: RentRequestUpdateInput!, where: RentRequestWhereUniqueInput!): RentRequest
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  deleteChurch(where: ChurchWhereUniqueInput!): Church
  deleteFloor(where: FloorWhereUniqueInput!): Floor
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
  deleteRentRequest(where: RentRequestWhereUniqueInput!): RentRequest
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertChurch(where: ChurchWhereUniqueInput!, create: ChurchCreateInput!, update: ChurchUpdateInput!): Church!
  upsertFloor(where: FloorWhereUniqueInput!, create: FloorCreateInput!, update: FloorUpdateInput!): Floor!
  upsertRoom(where: RoomWhereUniqueInput!, create: RoomCreateInput!, update: RoomUpdateInput!): Room!
  upsertSchedule(where: ScheduleWhereUniqueInput!, create: ScheduleCreateInput!, update: ScheduleUpdateInput!): Schedule!
  upsertRentRequest(where: RentRequestWhereUniqueInput!, create: RentRequestCreateInput!, update: RentRequestUpdateInput!): RentRequest!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyChurches(data: ChurchUpdateInput!, where: ChurchWhereInput!): BatchPayload!
  updateManyFloors(data: FloorUpdateInput!, where: FloorWhereInput!): BatchPayload!
  updateManyRooms(data: RoomUpdateInput!, where: RoomWhereInput!): BatchPayload!
  updateManySchedules(data: ScheduleUpdateInput!, where: ScheduleWhereInput!): BatchPayload!
  updateManyRentRequests(data: RentRequestUpdateInput!, where: RentRequestWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyChurches(where: ChurchWhereInput!): BatchPayload!
  deleteManyFloors(where: FloorWhereInput!): BatchPayload!
  deleteManyRooms(where: RoomWhereInput!): BatchPayload!
  deleteManySchedules(where: ScheduleWhereInput!): BatchPayload!
  deleteManyRentRequests(where: RentRequestWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  isPublished: Boolean
  title: String!
  text: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithoutAuthorInput!]
  upsert: [PostUpsertWithoutAuthorInput!]
}

input PostUpdateWithoutAuthorDataInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostUpdateWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  churches(where: ChurchWhereInput, orderBy: ChurchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Church]!
  floors(where: FloorWhereInput, orderBy: FloorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Floor]!
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room]!
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule]!
  rentRequests(where: RentRequestWhereInput, orderBy: RentRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RentRequest]!
  post(where: PostWhereUniqueInput!): Post
  user(where: UserWhereUniqueInput!): User
  church(where: ChurchWhereUniqueInput!): Church
  floor(where: FloorWhereUniqueInput!): Floor
  room(where: RoomWhereUniqueInput!): Room
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  rentRequest(where: RentRequestWhereUniqueInput!): RentRequest
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  churchesConnection(where: ChurchWhereInput, orderBy: ChurchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChurchConnection!
  floorsConnection(where: FloorWhereInput, orderBy: FloorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FloorConnection!
  roomsConnection(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoomConnection!
  schedulesConnection(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScheduleConnection!
  rentRequestsConnection(where: RentRequestWhereInput, orderBy: RentRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RentRequestConnection!
  node(id: ID!): Node
}

type RentRequestConnection {
  pageInfo: PageInfo!
  edges: [RentRequestEdge]!
  aggregate: AggregateRentRequest!
}

input RentRequestCreateInput {
  status: REQUEST_STATUS
  user: UserCreateOneInput!
}

type RentRequestEdge {
  node: RentRequest!
  cursor: String!
}

enum RentRequestOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RentRequestPreviousValues {
  id: ID!
  status: REQUEST_STATUS
}

type RentRequestSubscriptionPayload {
  mutation: MutationType!
  node: RentRequest
  updatedFields: [String!]
  previousValues: RentRequestPreviousValues
}

input RentRequestSubscriptionWhereInput {
  AND: [RentRequestSubscriptionWhereInput!]
  OR: [RentRequestSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RentRequestWhereInput
}

input RentRequestUpdateInput {
  status: REQUEST_STATUS
  user: UserUpdateOneInput
}

input RentRequestWhereInput {
  AND: [RentRequestWhereInput!]
  OR: [RentRequestWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: REQUEST_STATUS
  status_not: REQUEST_STATUS
  status_in: [REQUEST_STATUS!]
  status_not_in: [REQUEST_STATUS!]
  user: UserWhereInput
}

input RentRequestWhereUniqueInput {
  id: ID
}

enum REQUEST_STATUS {
  SUBMITTED
  PENDING
  REJECTED
  APPROVED
}

enum ROOM_STATUS {
  FREE
  INUSE
}

type RoomConnection {
  pageInfo: PageInfo!
  edges: [RoomEdge]!
  aggregate: AggregateRoom!
}

input RoomCreateInput {
  name: String
  floor: FloorCreateOneWithoutRoomsInput!
}

input RoomCreateManyWithoutFloorInput {
  create: [RoomCreateWithoutFloorInput!]
  connect: [RoomWhereUniqueInput!]
}

input RoomCreateWithoutFloorInput {
  name: String
}

type RoomEdge {
  node: Room!
  cursor: String!
}

enum RoomOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RoomPreviousValues {
  id: ID!
  name: String
}

type RoomSubscriptionPayload {
  mutation: MutationType!
  node: Room
  updatedFields: [String!]
  previousValues: RoomPreviousValues
}

input RoomSubscriptionWhereInput {
  AND: [RoomSubscriptionWhereInput!]
  OR: [RoomSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoomWhereInput
}

input RoomUpdateInput {
  name: String
  floor: FloorUpdateOneWithoutRoomsInput
}

input RoomUpdateManyWithoutFloorInput {
  create: [RoomCreateWithoutFloorInput!]
  connect: [RoomWhereUniqueInput!]
  disconnect: [RoomWhereUniqueInput!]
  delete: [RoomWhereUniqueInput!]
  update: [RoomUpdateWithoutFloorInput!]
  upsert: [RoomUpsertWithoutFloorInput!]
}

input RoomUpdateWithoutFloorDataInput {
  name: String
}

input RoomUpdateWithoutFloorInput {
  where: RoomWhereUniqueInput!
  data: RoomUpdateWithoutFloorDataInput!
}

input RoomUpsertWithoutFloorInput {
  where: RoomWhereUniqueInput!
  update: RoomUpdateWithoutFloorDataInput!
  create: RoomCreateWithoutFloorInput!
}

input RoomWhereInput {
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  floor: FloorWhereInput
}

input RoomWhereUniqueInput {
  id: ID
}

type ScheduleConnection {
  pageInfo: PageInfo!
  edges: [ScheduleEdge]!
  aggregate: AggregateSchedule!
}

input ScheduleCreateInput {
  roomStatus: ROOM_STATUS
  booker: UserCreateOneInput!
}

type ScheduleEdge {
  node: Schedule!
  cursor: String!
}

enum ScheduleOrderByInput {
  id_ASC
  id_DESC
  roomStatus_ASC
  roomStatus_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SchedulePreviousValues {
  id: ID!
  roomStatus: ROOM_STATUS
}

type ScheduleSubscriptionPayload {
  mutation: MutationType!
  node: Schedule
  updatedFields: [String!]
  previousValues: SchedulePreviousValues
}

input ScheduleSubscriptionWhereInput {
  AND: [ScheduleSubscriptionWhereInput!]
  OR: [ScheduleSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ScheduleWhereInput
}

input ScheduleUpdateInput {
  roomStatus: ROOM_STATUS
  booker: UserUpdateOneInput
}

input ScheduleWhereInput {
  AND: [ScheduleWhereInput!]
  OR: [ScheduleWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  roomStatus: ROOM_STATUS
  roomStatus_not: ROOM_STATUS
  roomStatus_in: [ROOM_STATUS!]
  roomStatus_not_in: [ROOM_STATUS!]
  booker: UserWhereInput
}

input ScheduleWhereUniqueInput {
  id: ID
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  church(where: ChurchSubscriptionWhereInput): ChurchSubscriptionPayload
  floor(where: FloorSubscriptionWhereInput): FloorSubscriptionPayload
  room(where: RoomSubscriptionWhereInput): RoomSubscriptionPayload
  schedule(where: ScheduleSubscriptionWhereInput): ScheduleSubscriptionPayload
  rentRequest(where: RentRequestSubscriptionWhereInput): RentRequestSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  email: String!
  password: String!
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  password: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateNestedInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  password: String
  name: String
}

input UserUpdateWithoutPostsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPostsDataInput!
}

input UserUpsertNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutPostsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
